var router = require('express').Router();
var oracledb = require('oracledb');
var dbconfig = require('../config/dbconfig');


router.get('/locations', (req, res) => {
    db.execute(
        `select  l.location_seq,
            l.location_name,
            t.openingtime,
            t.closedtime,
            t.exact_address
        from WX_LOCATION_DETAIL t, WX_DNR_PHLE_LOCATION l
        where t.location_seq = l.location_seq`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/location', (req, res) => {
    const location_id = req.query.location_id;
    db.execute(
        `select  l.location_seq,
            l.location_name,
            t.openingtime,
            t.closedtime,
            t.exact_address,
            t.lat,
            t.lng
        from WX_LOCATION_DETAIL t, WX_DNR_PHLE_LOCATION l
        where t.location_seq = l.location_seq
            and l.location_seq = :id`,
        [location_id],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.get('/profession', (req, res) => {
    db.execute(
        `select t.profession_seq,
         t.profession_name
         from NBSSS.DNR_PROFESSION@DL_NBSSS t
         where t.active = 1`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/education', (req, res) => {
    db.execute(
        `select t.education_seq,
         t.education_name 
         from NBSSS.DNR_EDUCATION@DL_NBSSS t
         where t.active = 1`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/nation', (req, res) => {
    db.execute(
        `select t.nation_seq,
         t.nation_name 
         from NBSSS.DNR_NATION@DL_NBSSS t`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/abogroup', (req, res) => {
    db.execute(
        `select t.id_abo,
        t.desc_abo 
        from WX_DNR_ABO t`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/reaction_type', (req, res) => {
    db.execute(
        `select t.type_seq,
        t.type_desc
        from NBSSS.DNR_PHLE_REACTION_TYPE@dl_nbsss t
        where t.active = 1`,
        (err,result) => {
            res.send(result.rows)
        }
    )
});

router.get('/relationship', (req, res) => {
    db.execute(
        `select t.relation_type_code,
            t.relation_type_desc 
        from NBSSS.DNR_RELATION_TYPE@dl_nbsss t
        where t.active = 1`,
        (err,result) => {
            res.send(result.rows);
        }
    )
});

router.post('/add_apply', (req, res) => {
     const data = req.body;
     console.log(req.session.userid);
     let userid = req.session.userid
     db.execute(`insert into WX_VOLUNTEER_APPLY(NAME,idcard,phone,email,company,profession,education,nation,abogroup,isdonation,address,ispermanentresidence,residence,profileimg,user_id,create_date,form_state)
                 values(:NAME,:idcard,:phone,:email,:company,:profession,:education,:nation,:abogroup,:isdonation,:address,:ispermanentresidence,:residence,:profileimg,:user_id,sysdate,:form_state)`,
                [
                    data.name,
                    data.idcard,
                    data.phone,
                    data.email,
                    data.company,
                    data.profession,
                    data.education,
                    data.nation,
                    data.abogroup,
                    data.isdonation.toString(),
                    data.address,
                    data.ispermanentresident.toString(),
                    data.residence,
                    data.url,
                    userid,
                    1 //默认表单状态
                ],
                { autoCommit: true}, 
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
     data.msg = '提交成功(服务端返回)';
     res.json(data);
 });

router.get('/query_apply', (req, res) => {
    db.execute(
        `select  t.id,
        t.name,
        t.idcard,
        t.phone,
        t.email,
        t.company,
        p.profession_name,
        e.education_name,
        n.nation_name,
        a.desc_abo,
        decode(t.isdonation,'true','是','false','否',t.isdonation) as isdonation,
        t.address,
        decode(t.ispermanentresidence,'true','是','false','否',t.ispermanentresidence) as ispermanentresidence,
        t.residence,
        t.user_id,
        t.create_date,
        s.state_desc
        from (select * from WX_VOLUNTEER_APPLY where user_id = :user_id) t,
        NBSSS.DNR_PROFESSION@DL_NBSSS p,
        NBSSS.DNR_EDUCATION@DL_NBSSS e,
        NBSSS.DNR_NATION@DL_NBSSS n,
        WX_DNR_ABO a,
        wx_volunteer_apply_state s
        where t.profession = p.profession_seq
        and t.education = e.education_seq
        and t.nation = n.nation_seq
        and t.abogroup = a.id_abo
        and t.form_state = s.id
        order by t.create_date desc`,
        [req.session.userid],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.get('/query_reimburse',(req,res) => {
    db.execute(
        `select t.id,
            r.relation_type_desc,
            t.account,
            t.bankaccount,
            t.bankname,
            t.branchname,
            t.city,
            t.name,
            t.telphone,
            t.idcard,
            t.psn_seq,
            t.create_date,
            s.state_desc,
            t.state
        from (select * from WX_DNR_REIMBURSE where user_id = :user_id) t,dnr_relation_type r,wx_dnr_reimburse_state s
        where t.relation = r.relation_type_code
          and t.state = s.id
        order by t.create_date desc`,
        [req.session.userid],
        (err,result) => {
            console.log('runing here,先执行这里的，再执行读clob.')
            res.json(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.get('/query_reserv', (req, res) => {
    db.execute(
        `select t.reserv_date,
        t.comms,
        t.create_date,
        p.period_begin||'~'||p.peried_end as period,
        l.location_name,
        t.id,
        s.reserv_desc
        from (select * from WX_VOLUNTEER_RESERV where user_id = :user_id) t,
          WX_DNR_LOCATION_RESERVATION p,
          WX_DNR_PHLE_LOCATION l,
          WX_VOLUNTEER_RESERV_STATE s
        where t.period_id = p.id
          and l.location_seq = p.location_id
          and s.id = t.reserv_state
        order by t.create_date desc`,
        [1],
        (err,result) => {
            console.log(result.rows);
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.get('/query_isreserv', (req, res) => {
    const reserv_id = req.query.reservid;
    db.execute(`select t.reserv_state from WX_VOLUNTEER_RESERV t where t.id = :reserv_id`,
                [reserv_id],
                (err,result) => {
                    res.send({
                        reserv_state: result.rows[0][0]
                    });
                }
              );
});

router.get('/query_reaction', (req, res) => {
    db.execute(
        `select t.record_seq,
            t.create_date,
            t.contact_seq,
            t.comments
        from DNR_REACTION_RECORD t`,
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.post('/query_isdonation', (req, res) => {
    const data = req.body;
    db.execute(`select count(*) as cnt,t.psn_seq from 
                NBSSS.DNR_PERSON@dl_nbsss t
                where t.psn_name = :name
                and t.idcard = :idcard
                and t.cell_call = :phone
                and t.active = 1
                group by t.psn_seq`,
                [
                    data.name,
                    data.idcard,
                    data.phone
                ],
               (err,result) =>{
                   if(err) {
                       return;
                   } else {
                       if (result.rows.length == 1) {
                            data.cnt = result.rows[0][0];
                            data.psnseq = result.rows[0][1]
                       }
                       res.json(data);
                   }
               });
    
});

router.get('/query_period', (req, res) => {
    db.execute(
        `select t.id,
            t.location_id,
            p.location_name,
            t.period_begin,
            t.peried_end,
            t.available,
            t.create_date,
            l.mail 
        from WX_DNR_LOCATION_RESERVATION t, wx_dnr_phle_location p, wx_user_local l
        where p.location_seq = t.location_id
          and l.id = t.user_id`,
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.post('/examination/answers', (req, res) => {
    let question_id = req.query.question_id;
    db.execute(
        `select * from WX_VOLUNTEER_QUESTION_ANSWER t where t.question_id = :id`,
        [question_id],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            )
        }
    )
});

router.post('/recall_apply', (req, res) => {
    let form_id = req.query.form_id;
    db.execute(
        `update wx_volunteer_apply t set t.form_state=2 where t.id = :form_id returning rowid into :rid`,
        {
            form_id: form_id,
            rid:   { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },
        { autoCommit: true},
        (err,result) => {
            if (err) {
                console.error(err);
                return;
              }
              res.send({
                  rowid: result.outBinds
              });
        }
    );
});

router.post('/recall_reimburse', (req, res) => {
    let form_id = req.query.form_id;
    db.execute(
        `update wx_dnr_reimburse t set t.state=2 where t.id = :form_id returning rowid into :rid`,
        {
            form_id: form_id,
            rid:   { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },
        { autoCommit: true},
        (err,result) => {
            if (err) {
                console.error(err);
                return;
              }
              res.send({
                  rowid: result.outBinds
              });
        }
    );
});

// 删
router.post('/queryimg_reimburse', (req, res) => {
    let form_id = req.query.form_id;
    db.execute(
        `select t.idcardimg1url,t.idcardimg2url from WX_DNR_REIMBURSE t where t.id = :form_id`,
        {
            form_id: form_id
        },
        (err,result) => {
        if (err) {
            console.error(err);
            return;
        }
        // 身份证照正面
        var c_idcardimg1url = '';
        var idcardimg1url = result.rows[0][0];
        if (idcardimg1url === null) { console.log("BLOB was NULL"); return; }
        idcardimg1url.setEncoding('utf8');
        idcardimg1url.on(
            'error',
            function(err)
            {
                console.log("lob.on 'error' event");
                console.error(err);
            });
        idcardimg1url.on('data', function (chunk) {
            c_idcardimg1url += chunk; 
            });
        
        // 身份证照反面
        var c_idcardimg1ur2 = '';
        var idcardimg1ur2 = result.rows[0][1];
        if (idcardimg1ur2 === null) { console.log("BLOB was NULL"); return; }
        idcardimg1ur2.on(
            'end',
            function()
            {
                console.log("lob.on 'end' event");
                 res.send({
                    idcardimg1url: c_idcardimg1url,
                    idcardimg1ur2: c_idcardimg1ur2
                 });
            });
        idcardimg1ur2.on(
            'close',
            function()
            {
                //console.log("lob.on 'close' event");
            });
        idcardimg1ur2.on(
            'error',
            function(err)
            {
                console.log("lob.on 'error' event");
                console.error(err);
            });
        idcardimg1ur2.on('data', function (chunk) {
            c_idcardimg1ur2 += chunk;
            });
        }
    );
});

router.post('/recall_reserv', (req, res) => {
    let reserv_id = req.query.reserv_id;
    db.execute(
        `update WX_VOLUNTEER_RESERV t set t.reserv_state = 2 where t.id = :reserv_id returning rowid into :rid`,
        {
            reserv_id: reserv_id,
            rid:   { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },
        { autoCommit: true},
        (err,result) => {
            if (err) {
                console.error(err);
                return;
              }
              res.send({
                  rowid: result.outBinds
              });
        }
    );
});

router.get('/questions', (req, res) => {
    db.execute(
        `select * from WX_VOLUNTEER_QUESTION t order by t.id`,
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            )
        }
    )
});

router.get('/location/reservation', (req, res) => {
    const location_id = req.query.location_id;
    db.execute(
        `select * from WX_DNR_LOCATION_RESERVATION t
        where t.location_id = :location_id`,
        [location_id],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            )
        }
    )
});

router.post('/volunteer/add_resv', (req, res) => {
    const data = req.body;
    let userid = req.session.userid;
    const bindvars = {
        date: data.date,
        period: data.period,
        user_id: userid,
        comms: data.comms,
    };

    db.execute(`BEGIN volunteer_reserv_proc(:date, :period, :user_id, :comms); END;`,
                bindvars,
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
    res.json(data);
});

router.get('/reaction', (req, res) => {
    const idcard = req.query.idcard;
    db.execute(
        `select tmp.reg_seq,
        tmp.reg_emp,
        e.employee_name,
        tmp.reg_date,
        tmp.org_seq,
        o.org_name,
        tmp.psn_name,
        tmp.reg_emp 
        from ( select * 
        from NBSSS.DNR_PSN_REG@dl_nbsss 
        where idcard = :idcard
        order by reg_date desc) tmp,NBSSS.ORG_ORGANIZATION@dl_nbsss o,NBSSS.ORG_EMPLOYEE@dl_nbsss e
        where rownum = 1
            and o.org_seq = tmp.org_seq
            and tmp.reg_emp = e.employee_seq`,
        [idcard],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.post('/add_reaction', (req, res) => {
    const data = req.body;
    db.execute(`insert into DNR_REACTION_RECORD(RECORD_SEQ,REG_SEQ,TYPE_SEQ,
                ORG_SEQ,REG_EMP,REG_DATE,CREATE_EMP,
                CREATE_DATE,COMMENTS,STATUS,CONTACT_SEQ)values(:RECORD_SEQ,:REG_SEQ,:TYPE_SEQ,
                :ORG_SEQ,:REG_EMP,:REG_DATE,:CREATE_EMP,
                sysdate,:COMMENTS,:STATUS,:CONTACT_SEQ)`,
               [
                   1,// recode_seq
                   data.reg_seq,
                   data.reaction_type,
                   data.org_seq,
                   data.reg_emp,
                   data.reg_date,
                   2324,// create_emp 微信
                   data.comms,
                   1, // 表单状态 初始值1
                   data.contact
               ],
               { autoCommit: true}, 
               (err,result) =>{
                   if(err) {
                       console.log(err);
                       return;
                   } else {
                       console.log('提交成功: ' + result.rowsAffected + '个记录。');
                   }
               });
    data.msg = '提交成功(服务端返回)';
    res.json(data);
});

router.get('/doninfo', (req, res) => {
    const psnseq = req.query.psnseq;
    db.execute(
        `select t.psn_name,
            t.idcard,
            t.cell_call
        from NBSSS.DNR_PERSON@dl_nbsss t
        where t.psn_seq = :psnseq`,
        [psnseq],
        (err,result) => {
            res.send(
                {
                    rows: result.rows
                }
            );
        }
    )
});

router.post('/add_reimburse', (req, res) => {
    const data = req.body;
    const bindvars = {
        relation: data.relation,
        account: data.account,
        bankaccount: data.bankaccount,
        bankname: data.bankname,
        branchname: data.branchname,
        city: data.city,
        idcardimg1url: data.idcardImg1url,
        idcardimg2url: data.idcardImg2url,
        name: data.name,
        telphone: data.telphone,
        idcard: data.idcard,
        psn_seq: data.psnseq,
        user_id: req.session.userid,
        handleidcard: data.handleIdcardImg,
        inpatientInvoice: data.inpatientInvoiceImg,
        blooddetail: data.blooddetailImg
    };

    db.execute(`insert into WX_DNR_REIMBURSE(RELATION,ACCOUNT,BANKACCOUNT,
                    BANKNAME,BRANCHNAME,CITY,IDCARDIMG1URL,IDCARDIMG2URL,
                    NAME,TELPHONE,IDCARD,PSN_SEQ,user_id,create_date,state,handleidcard,inpatientInvoice,blooddetail)values(:relation,:account,:bankaccount,
                    :bankname,:branchname,:city,:idcardimg1url,:idcardimg2url,
                    :name,:telphone,:idcard,:psn_seq,:user_id,sysdate,1,:handleidcard,:inpatientInvoice,:blooddetail)`,
                bindvars,
                { autoCommit: true},
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        data.msg = 'success';
                        res.json(data);
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
});

router.post('/add_period', (req, res) => {
    const data = req.body;
    const userid = req.session.passport.user;
    console.log(req.session.passport.user);
    db.execute(`insert into WX_DNR_LOCATION_RESERVATION(id, location_id, PERIOD_BEGIN, PERIED_END, available, create_date, USER_ID)
                values(SEQ_VOLUNTEER_period_ID.nextval, :1, :2, :3, :4, sysdate, :5)`,
                [
                    data.collectionpoint,
                    data.start,
                    data.end,
                    data.available,
                    userid
                ],
                { autoCommit: true},
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        data.msg = 'success';
                        res.json(data);
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
});

router.post('/edit_period', (req, res) => {
    const data = req.body;
    db.execute(`update WX_DNR_LOCATION_RESERVATION t 
                set t.location_id = :1,
                    t.period_begin = :2,
                    t.peried_end = :3,
                    t.available = :4
                where t.id = :5`,
                [
                    data.collectionpoint,
                    data.start,
                    data.end,
                    data.available,
                    data.id
                ],
                { autoCommit: true},
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        data.msg = 'success';
                        res.json(data);
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
});

router.post('/update_reimburse', (req, res) => {
    const data = req.body;
    const bindvars = {
        form_id: data.form_id,
        relation: data.relation,
        account: data.account,
        bankaccount: data.bankaccount,
        bankname: data.bankname,
        branchname: data.branchname,
        city: data.city,
        idcardimg1url: data.idcardImg1url,
        idcardimg2url: data.idcardImg2url,
        handleidcard: data.handleIdcardImg,
        inpatientInvoice: data.inpatientInvoiceImg,
        blooddetail: data.blooddetailImg
    };
    db.execute(`update WX_DNR_REIMBURSE t 
                set t.relation = :relation,
                    t.account = :account,
                    t.bankaccount = :bankaccount,
                    t.bankname = :bankname,
                    t.branchname = :branchname,
                    t.city = :city,
                    t.idcardimg1url = :idcardimg1url,
                    t.idcardimg2url = :idcardimg2url,
                    t.handleidcard = :handleidcard,
                    t.inpatientInvoice = :inpatientInvoice,
                    t.blooddetail = :blooddetail
                where t.id = :form_id`,
                bindvars,
                { autoCommit: true},
                (err,result) =>{
                    if(err) {
                        console.log(err);
                        return;
                    } else {
                        data.msg = 'success';
                        res.json(data);
                        console.log('提交成功: ' + result.rowsAffected + '个记录。');
                    }
                });
});

router.get('/delete_period', (req, res) => {
    const id = req.query.id;
    db.execute(`delete WX_DNR_LOCATION_RESERVATION where id = :id`,
    [id],
    {autoCommit: true},
    (err,result) => {
        if(err) {
            console.log(err);
            return;
        } else {       
            res.json({message: 'success'});
            console.log('提交成功: ' + result.rowsAffected + '个记录。');
        }
    }
    )
});

router.get('/editreimburse', (req, res) => {
    const form_id = req.query.form_id;
    db.execute(
        `select * from WX_DNR_REIMBURSE t where t.id = :id`,
        [form_id],
        (err,result) => {
            if (err) {
                console.error(err);
                return;
            }
            var c_idcardimg1url = '';
            var idcardimg1url = result.rows[0][7];
            if (idcardimg1url === null) { console.log("BLOB was NULL"); return; }
            idcardimg1url.setEncoding('utf8');
            idcardimg1url.on(
                'end',
                () => {
                    // 身份证照反面
                    var c_idcardimg1ur2 = '';
                    var idcardimg1ur2 = result.rows[0][8];
                    if (idcardimg1ur2 === null) { console.log("BLOB was NULL"); return; }
                    idcardimg1ur2.on('data', function (chunk) {
                        c_idcardimg1ur2 += chunk;
                        });
                    idcardimg1ur2.on(
                        'end',
                        () => {
                            // 用血者手持身份证
                            var c_handleidcard = '';
                            var handleidcard = result.rows[0][16];
                            if (handleidcard === null) { console.log("BLOB was NULL"); return; }
                            handleidcard.on('data', function (chunk) {
                                c_handleidcard += chunk;
                                });
                            handleidcard.on(
                                'end',
                                () => {
                                    // 住院发票
                                    var c_inpatientInvoice = '';
                                    var inpatientInvoice = result.rows[0][17];
                                    if (inpatientInvoice === null) { console.log("BLOB was NULL"); return; }
                                    inpatientInvoice.on('data', function (chunk) {
                                        c_inpatientInvoice += chunk;
                                        });
                                    inpatientInvoice.on(
                                        'end',
                                        () => {
                                            // 用血明细
                                            var c_blooddetail = '';
                                            var blooddetail = result.rows[0][18];
                                            if (blooddetail === null) { console.log("BLOB was NULL"); return; }
                                            blooddetail.on(
                                                'end',
                                                function()
                                                {
                                                    res.send({
                                                        idcardimg1url: c_idcardimg1url,
                                                        idcardimg1ur2: c_idcardimg1ur2,
                                                        handleidcard: c_handleidcard,
                                                        inpatientInvoice: c_inpatientInvoice,
                                                        blooddetail: c_blooddetail,
                                                        relation: result.rows[0][1],
                                                        account: result.rows[0][2],
                                                        bankaccount: result.rows[0][3],
                                                        bankname: result.rows[0][4],
                                                        branchname: result.rows[0][5],
                                                        city: result.rows[0][6],
                                                        form_state: result.rows[0][15],
                                                        // 仅用于显示
                                                        name: result.rows[0][9],
                                                        idcard: result.rows[0][10],
                                                        telphone: result.rows[0][11]
                                                    });
                                                });
                                            blooddetail.on('data', function (chunk) {
                                                c_blooddetail += chunk;
                                                });
                                            blooddetail.on(
                                                'end',
                                                () => {
                                                    console.log('5 end')
                                                    // 加图片-则需将响应体放到读最后一张图片结束处，
                                                }
                                            )

                                        }
                                    )
                                }
                            )
                        }
                    )
                });
            idcardimg1url.on('data', function (chunk) {
                c_idcardimg1url += chunk;
                });
        }
    )
});

router.get('/userinfo', (req, res) => {
    let userid = req.session.userid;
    db.execute(
        `select p.psn_name,p.idcard,p.cell_call
            from WX_USER t,NBSSS.DNR_PERSON@dl_nbsss p
            where p.psn_seq = t.psn_seq
            and t.openid = :userid`,
        [userid],
        (err,result) => {
            res.send({
                userinfo: result.rows[0]
            });
        }
    )
});

router.get('/userinfo-h', (req, res) => {
    let userid = req.session.userid;
    db.execute(
        `select p.psn_name,p.idcard,p.cell_call,t.img_path
            from WX_USER t,NBSSS.DNR_PERSON@dl_nbsss p
            where p.psn_seq = t.psn_seq
            and t.openid = :userid`,
        [userid],
        (err,result) => {
            res.send({
                userinfo: result.rows[0]
            });
        }
    )
});

router.post('/user_register', (req, res) => {
    let { mail, password, mobile } = req.body;
    db.execute(
        `insert into WX_USER_LOCAL(ID,PASSWORD,MAIL,mobile)
        values(seq_local_user_id.nextval,:password,:mail,:mobile)`,
        [password, mail, mobile],
        {autoCommit: true},
        (err,result) => {
            if(err) {
                return;
            }
            res.send({
                message: 'success'
            });
        }
    )
});

router.post('/check_mail',(req, res) => {
    let mail = req.body.mail;
    db.execute(
        `select * from WX_USER_LOCAL t
        where t.mail = :email`,
        [mail],
        (err, result) => {
            if(result.rows.length > 0) {
                res.send(
                    {
                        isvalid: false
                    }
                );
            } else {
                res.send(
                    {
                        isvalid: true
                    }
                );
            }
        }
    )
});

router.get('/userinfo_local', (req, res) => {
    if (!('passport' in req.session)) {
        return res.send({
            message: {
                id: false,
                content: '/home'
            }
        });
    }
    if (!('user' in req.session.passport)) {
        return res.send({
            message: {
                id: false,
                content: '/home'
            }
        });
    }
    let userid = req.session.passport.user;
    db.execute(
        `select t.id, t.mail, t.mobile from wx_user_local t where t.id = :id`,
        [userid],
        (err,result) => {
            res.send({
                message: {
                    id: true,
                    content: result.rows[0]
                }
            })
        }
    )


});

oracledb.getConnection(
    dbconfig.wxdb
).then(connecttion => {
    db = connecttion;
}).catch(error => {
    console.log('ERROR:', error)
});

module.exports = router;